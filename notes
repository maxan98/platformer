2014-12-27

CES

An entity corresponds to a 'thing' in a game world. Concretely, an entity is a
globally unique id, which maps to a set of components. For example, a player
entity might have a Position component, a Drawable component, a Physics
component, and a Input component. There can be dependencies between components -
for example a Drawable component depends on the Position component, because to
render something to the screen you need to know where to do so. Similarly, the
Physics component depends on the Position component, reading and writing the
position as it updates the player's position according to its current
velocity. On the other hand, an immobile entity would have a Position and
Drawable component, but not a Physics component.

Concretely, a component is class with no methods, only data. Each subsystem is a
singleton class that has as its member a table mapping entity ids to
components. This table and the component class itself are private to the
subsystem to provide proper encapsulation - if the Physics subsystem needs to
modify a Position component, it calls a method of the Position subsystem passing
in the appropriate component id.

The main loop calls each subsystem's update method in turn. In its update
method, each subsystem iterates over all of its components, updating them in
turn and calling out to other subsystems as needed.

Component initialization is tricky. Obviously you need to start by generating a
new entity ID, which could be done with a singleton ID generator. Since
components have dependencies on each other, you would need to ensure that each
entity has a consistent set of components - you can't have a physics component
without a position component, etc. Each subsystem can have hard-coded knowledge
of what other subsystems it depends on. Then, there are two approaches to
ensuring consistent component sets: in the "dynamic" approach, when a Physics
component is created it will create a Position component if none exists. In the
"static" approach, when a Physics component is created it asserts the existence
of a Position component. The dynamic approach encourages a style where to create
an entity you simply create the highest-level component and rely on it to
automatically instantiate the components it depends on. The static approach
requires clients to instantiate components manually in the correct order.

I'm leaning towards the static approach - the dynamic approach encourages lazy
programming, and may lead to hard to find bugs, while the static approach makes
dependencies and components used explicit. Since usually some setup logic will
need to take place with component initialization (like setting the initial x and
y for a Position component), this method ensures that all of the necessary setup
happens in the right place, instead of having mysterious default values. (Why
did the bullet end up over there? Oh right, I forgot to set the initial position
after the Position component was automatically instantiated when I created the
Physics component.)

Static helper methods could be created that will do the setup for common entity
types - for example, a static "makeEnemy" method that initializes Position,
Drawable, Physics, and AI components in the correct order.

2015-01-06

CES update and rethink

I want ahead and implemented everything, and it was largely successful. I was
able to tear apart the Entity and Player classes bit by bit, refactoring them
into components and subsystems. The end result actually worked with no debugging
- I did most of the refactoring in a massive +600-300 commit that I didn't so
much as compile, fixed about 100 compiler errors, and then it worked. Amazingly,
at the same time it fixed a subtle bug in the collision detection logic, where
the player was "stuck" to slope peaks that had no flat area at the
top. Unfortunately, after I did more refactoring the bug came back, and it's
still unresolved...

After eliminating the Entity and Player classes, and decoupling the input
component from the control component (by having the input component handle
keyboard input and then relay the result to the corresponding control component
over a command queue), I was able to add AI-controlled entities by simply
creating a (trivially simple) AI component that posted messages to the control
component. There were no real issues with getting this to work, which I consider
a success of the CES.

However, I've now been working on Entity-entity collision detection, and it's
starting to make clear some shortcomings of my design. Principally, I'm
concerned about the difficulty of intra-component customization, and the
currently ad-hoc nature of inter-component communication.


Intra-component customization: 

The CES system supports variation among entities through a lego system - adding
or removing components customizes behavior. For example, in Mario games when an
enemy is hit on the head, it responds by falling off the bottom of the
level. This should be trivially implementable by simply removing the entity's
collision detection component, which will make it plummet into oblivion. (A
"cleanup" component can automatically remove entities that leave the boundaries
of the map.) The current system supports this very well - entities are only
defined implicitly by a unique ID, so they are infinitely customizable in this
respect, even after they are already created.

However, currently the only mechanism for defining varied behavior within a
single component is embedding parameters in the component itself. This works
well if the only variation needed is in tweaking a numeric value,
or toggling a flag.

For example, it makes sense (in video games, if not in real life) that different
entities might be affected by gravity different amounts - a feather creature
should fall slower than a cannonball. This is easily accomplished by putting
"gravitational_acceleration" and "terminal_velocity" parameters in the Physics
component, which the Physics code uses in lieue of hard coded values.

In the case of a flag, it can make sense to use this method of customization as
well. Take the example of entity-entity collision detection. It makes sense that
some entities want both detection and resolution - when the player jumps on a
Goomba, the collision must be detected so some appropriate game action can be
taken, such as killing the Goomba. However, it is also necessary that the player
not fall through the Goomba, so both the Goomba's and the Player's positions
need to be adjusted. But what about a fireball that sweeps across the screen,
passing through enemies and damaging each of them in turn? Collision detection
is certainly needed for this, but resolution is not - the fireball just passes
through each entity it hits. This could be implemented by having separate
components for detection and resolution, but so much data would need to be
passed between them, it makes just as much sense to have a flag on the collision
detection component - if both entities in a collision are marked as solid, then
they are not allowed to penetrate each other - otherwise, their collision is
noted but no action is taken by the collision detection subsystem - they simply
pass through each other.

It's probably OK for a component to have any number of numeric parameters - it
makes the code no more complicated and adds customization at little cost (except
in memory). However, piling up a great number of flags will get unwieldy,
especially if they interact with each other. An even bigger problem is when the
customizations needed are fundamentally about behaviour, not data. For example,
each entity may need to react to a collision in a different way. If a player
collides with the top of a Goomba, the Goomba should fall off the screen and die
and the player should be bounced upwards. If a player collides with the side of
a Goomba, the player should be damaged and pushed backwards. If a fireball hits
a ghost, the fireball should be unaffected while the ghost should explode... and
so on, with each entity having different arbitrary behavior. Trying to do this
all with data will get really complex - the Bytecode pattern from GPP comes to
mind *shudder*. Such complexity might be justified if I wanted a team of game
designers to be able to create thousands of varied enemies, but I would really
like to be able to just write some simple code to represent different classes of
enemies, without regressing into a giant monolithic class for each different entity.

Phew, that was just the first problem!


Inter-component communication:

It's a fact of life that components need to communicate. My initial idea was
that components would be entirely encapsulated within their respective
subsystems, with any required communication happening through method calls to
the subsystem. This was rather naive of me - for example, the collision
detection subsystem needs to access and modify the entity's position multiple
times in every frame. Some parts of the engine are unavoidably tightly
coupled. For most inter-component communication, I think directly modifying
other components is the right choice. (An exception is the aforementioned
Command stream between the Input/AI components and the Control component, which
is naturally abstracted as a message queue - though it is implemented by having
the sender append to a list of commands that the receiver owns and empties each
frame.) Having the velocity component modify the position component by sending
an "update position" message is, in my opinion, a little overengineered for this
scale of game.

What I want to do is to enable easy communication between components, but
disallow arbitrary communication between ANY components. Each subsystem or
component should clearly specify which other components it depends on, and not
be allowed to communicate with or observe any others. The system should also
enforce that the necessary components always exist - if Velocity depends on
Position, then it should be an error to create an entity that has a Velocity but
no Position.

Right now, I accomplish this by giving each subsystem a component lookup method,
that allows you to get the component corresponding to a particular id. When the
velocity subsystem updates one of its components, it retrieves the corresponding
position component, since it knows the entity id, and then reads and modifies it
as needed. This is inefficient, and relies on the honor system to avoid
arbitrary inter-component dependencies.


Solutions:

The inter-component communication problem is easy. Instead of having each
component know its ID (which would allow it to arbitrarily access any other
component of its entity), give each component a pointer to the other components
it needs to do its job. This avoids the huge overhead of having to do component
lookups every frame, and requires explicitly specifying component dependencies
in the component objects themselves. The component pointers are initialized when
the dependent component is created, so we can fail fast if dependent components
are not present. This also makes circular component dependencies impossible - if
there are circular dependencies, it will be impossible to create components in a
suitable order.

The intra-component customization problem is best solved in my opinion by
refactoring the CES to be component focused, rather than subsystem
focused. Right now, the components are just dumb containers, and all logic is in
the subsystem. I think I naturally jumped to this solution because it's the way
I would solve this problem in a language like C, but it's very unidiomatic for
an object oriented language. By moving all possible logic out of the subsystem
and into the component, behaviour will be encapsulated together with data. This
allows customizing component behaviour by subclassing components. For example,
the base collision component could handle the actual detection and resolution
logic, but include a virtual "react to collision" method. Subclasses would
implement this method to take appropriate actions - like a Goomba checking if it
was jumped on and dying appropriately.


















































